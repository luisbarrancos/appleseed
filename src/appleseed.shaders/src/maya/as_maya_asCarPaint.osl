
//
// This source file is part of appleseed.
// Visit http://appleseedhq.net/ for additional information and resources.
//
// This software is released under the MIT license.
//
// Copyright (c) 2017 Luis Barrancos, The appleseedhq Organization
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//

#include "appleseed/material/as_material_helpers.h"

shader as_carPaint
[[
    string maya_node_name = "asCarPaint",
    string maya_classification = "shader/surface:appleseed/surface:swatch/appleseedRenderSwatch",
    string help = "Car Paint Material",
    int maya_type_id = 1210822
]]
(
    color in_color = color(0.5)
    [[
        string maya_attribute_name = "color",
        string maya_attribute_type = "color",
        string maya_attribute_short_name = "c",
        string label = "Surface Color",
        string page = "Common Material Attributes"
    ]],
    int in_paintMode = 0
    [[
        string maya_attribute_type = "enum",
        string label = "Paint Mode",
        string widget = "mapper",
        string options = "Gloss:0|Matte:1|Metallic:2|Dual Color:3|Iridescent:4",
        string page = "Common Material Attributes"
    ]],

    float in_paintRoughness = 0.2
    [[
        string maya_attribute_type = "float",
        string widget = "slider",
        float min = 0.0,
        float max = 1.0,
        float slidermin = 0.0,
        float slidermax = 1.0,
        string label = "Paint Roughness",
        string page = "Common Material Attributes"
    ]],

    // Clear coat, derive eta from reflectance
    float in_clearCoatReflectance = 0.1
    [[
        string label = "Clear Coat Reflectance",
        string page = "Clear Coat"
    ]],
    float in_clearCoatRoughness = 0.01
    [[
        string label = "Clear Coat Roughness",
        string page = "Clear Coat"
    ]],

    // Absorption effective in all modes except matte
    color in_absorptionColor = color(0.95, 0.1, 0.15)
    [[
        string label = "Absorption Color",
        string page = "Absorption"
    ]],
    float in_absorptionDepth = 1.0
    [[
        string label = "Absorption Depth",
        string page = "Absorption"
    ]],

    // Metallic, use 3 CT lobes and data
    // https://pdfs.semanticscholar.org/173b/90089e8e63ca1edbf7d65dbbb3ace63b4066.pdf
    // Has measured data for 3x Cook-Torrance lobes. It's a starting point,
    // but GTR with a high gamma does a similar effect.

    color in_metallicColorA = color(0.9, 0.91, 0.98)
    [[
        string label = "Metallic Color A",
        string page = "Metallic Paint"
    ]],
    color in_metallicColorB = color(1.0, 0.9, 1.0)
    [[
        string label = "Metallic Color B",
        string page = "Metallic Paint"
    ]],
    color in_metallicColorC = color(0.9, 1.0, 1.0)
    [[
        string label = "Metallic Color C",
        string page = "Metallic Paint"
    ]],
    float in_metallicRoughnessA = 0.6
    [[
        string label = "Metallic Roughness A",
        string page = "Metallic Paint"
    ]],
    float in_metallicRoughnessB = 0.3
    [[
        string label = "Metallic Roughness B",
        string page = "Metallic Paint"
    ]],
    float in_metallicRoughnessC = 0.2
    [[
        string label = "Metallic Roughness C",
        string page = "Metallic Paint"
    ]],
    // use metallic color A as f0 reflectance, white as f90, derive conductor
    // Fresnel

    color in_dualColorA = color(0.9, 0.8, 0.3)
    [[
        string label = "Dual Color A",
        string page = "Dual Color"
    ]],
    color in_dualColorB = color(0.1, 0.8, 0.4)
    [[
        string label = "Dual Color B",
        string page = "Dual Color"
    ]],
    float in_dualColorTransition = 1.0
    [[
        string label = "Dual Color Transition Power",
        float min = 0.0,
        float max = 10.0,
        float slidermin = 0.0,
        float slidermax = 1.0,
        string page = "Dual Color"
    ]],
    float in_dualColorReflectivity = 0.1
    [[
        string label = "Dual Color Reflectivity",
        float min = 0.0,
        float max = 1.0,
        float slidermin = 0.0,
        float slidermax = 1.0,
        string page = "Dual Color"
    ]],

    // Iridescence
    color in_iridescenceIOR = color(1.5, 1.4, 1.3)
    [[
        string label = "Iridescence IOR",
        string page = "Iridescent"
    ]],
    float in_thinFilmDepth = 1.0
    [[
        string label = "Thin Film Depth",
        string page = "Iridescent"
    ]],

    float in_anisotropyAmount = 0.0
    [[
        float min = 0.0,
        float max = 1.0,
        float slidermin = 0.0,
        float slidermax = 1.0,
        string label = "Anisotropy Amount",
        string page = "Anisotropy"
    ]],
    float in_anisotropyAngle = 0.0
    [[
        float min = 0.0,
        float max = 1.0,
        float slidermin = 0.0,
        float slidermax = 1.0,
        string label = "Anisotropy Angle",
        string help = "The [0,1] range maps to [0,360] degrees range",
        string page = "Anisotropy"
    ]],
    color in_anisotropyVectorMap = color(0)
    [[
        string label = "Anisotropy Vector Map",
        string page = "Anisotropy"
    ]],

    normal in_normalCamera = N
    [[
        string maya_attribute_name = "normalCamera",
        string maya_attribute_short_name = "n",
        string label = "Bump Normal",
        string page = "Bump"
    ]],
    int in_matteOpacityMode = 2
    [[
        string maya_attribute_name = "matteOpacityMode",
        string maya_attribute_type = "enum",
        string label = "Matte Opacity Mode",
        string widget = "mapper",
        string options = "Black Hole:0|Solid Matte:1|Opacity Gain:2",
        string page = "Matte Opacity"
    ]],
    float in_matteOpacity = 1.0
    [[
        string maya_attribute_name = "matteOpacity",
        string maya_attribute_type = "float",
        string label = "Matte Opacity",
        string page = "Matte Opacity"
    ]],
    int in_maximumRayDepth = 4
    [[
        int min = 0,
        int max = 32,
        int softmin = 0,
        int softmax = 8,
        string label = "Ray Depth",
        string page = "Advanced"
    ]],    
    vector Tn = vector(0)
    [[
        int lockgeom = 0,
        string widget = "null"
    ]],
    vector Bn = vector(0)
    [[
        int lockgeom = 0,
        string widget = "null"
    ]],

    output closure color out_outColor = 0
    [[
        string maya_attribute_name = "outColor",
        string maya_attribute_type = "color",
        string maya_attribute_short_name = "oc",
        string widget = "null"
    ]],
    output closure color out_outTransparency = 0
    [[
        string maya_attribute_name = "outTransparency",
        string maya_attribute_type = "color",
        string maya_attribute_short_name = "ot",
        string widget = "null"
    ]],
    output closure color out_outMatteOpacity = 0
    [[
        string maya_attribute_name = "outMatteOpacity",
        string maya_attribute_type = "color",
        string maya_attribute_short_name = "om",
        string widget = "null"
    ]]
)
{
    int ray_depth = 0;
    int status = getattribute("path:ray_depth", ray_depth);

    if (status && ray_depth <= in_maximumRayDepth)
    {
        closure color paint_base = 0;
        closure color paint_clear_coat = 0;

        normal Nn = normalize(in_normalCamera);
        vector tangent;

        if (in_anisotropyAmount && in_paintMode != 0)
        {
            if (isconnected(in_anisotropyVectorMap))
            {
                vector vector_map = normalize(
                    (vector) in_anisotropyVectorMap * 2.0 - 1.0);

                tangent = normalize(
                    vector_map[0] * Tn +
                    vector_map[1] * Bn +
                    vector_map[2] * Nn);
            }
            else
            {
                tangent = Tn;
            }

            if (in_anisotropyAngle)
            {
                tangent = rotate(
                    tangent,
                    in_anisotropyAngle * M_2PI,
                    point(0),
                    point(in_normalCamera));
            }
        }

        if (in_paintMode == 0)
        {
            // Gloss paint

            paint_base = in_color * diffuse(Nn);

            // Usually the clearcoat is a dielectric, between ior=1.4 to 1.6,
            // with a very sharp specular highlight. This would pose no big
            // problem with sampling, but it seems here there is considerable
            // undersampling. For now use (incorrect) viewer Fresnel as the
            // blending factor.
            if (in_clearCoatReflectance)
            {
                float ior = ior_from_normal_reflectance(
                    in_clearCoatReflectance);
#if 1
                float Kr, Kt;

                fresnel(normalize(I), Nn, 1.0 / ior, Kr, Kt);
                Kt = 1.0 - Kr;

                closure color clearcoat = as_glossy(
                    "beckmann",
                    Nn,
                    in_clearCoatRoughness,
                    ior);

                out_outColor = Kt * paint_base + clearcoat;
#else
                out_outColor = as_alsurface_layer(
                    paint_base,
                    1,
                    Nn,
                    vector(0),
                    color(1),
                    min(0.1, in_clearCoatRoughness),
                    0.0,
                    0,
                    ior,
                    color(1),
                    color(1));
#endif
            }
            else
            {
                out_outColor = paint_base;
            }
        }
        else if (in_paintMode == 1)
        {
            // Matte

            paint_base = in_color * oren_nayar(Nn, in_paintRoughness);

            if (in_clearCoatReflectance)
            {
                float ior = ior_from_normal_reflectance(
                    in_clearCoatReflectance);
#if 1
                float Kr, Kt;

                fresnel(normalize(I), Nn, 1.0 / ior, Kr, Kt);
                Kt = 1.0 - Kr;

                closure color clearcoat = as_glossy(
                    "beckmann",
                    Nn,
                    max(0.5, in_clearCoatRoughness),
                    ior);

                out_outColor = Kt * paint_base + clearcoat;
#else
                out_outColor = as_alsurface_layer(
                    paint_base,
                    1,
                    Nn,
                    tangent,
                    color(1),
                    max(0.5, in_paintRoughness),
                    in_anisotropyAmount,
                    0,
                    ior,
                    color(1),
                    color(1));
#endif
            }
            else
            {
                out_outColor = paint_base;
            }
        }
        else if (in_paintMode == 2)
        {
            // Metallic paint
            closure color metal_paint = 0;

            if (in_metallicColorA)
            {
                metal_paint = as_metal(
                    "ggx",
                    Nn,
                    tangent,
                    in_metallicColorA,
                    color(1),
                    in_metallicRoughnessA,
                    in_anisotropyAmount);
            }

            if (in_metallicColorB)
            {
                metal_paint = as_alsurface_layer(
                    metal_paint,
                    1,
                    Nn,
                    tangent,
                    color(1),
                    in_metallicRoughnessB,
                    in_anisotropyAmount,
                    1,
                    1.0, // ior, we use f0, f90 since Fresnel set to conductor
                    in_metallicColorB,
                    color(1));
            }

            if (in_metallicColorC)
            {
                metal_paint = as_alsurface_layer(
                    metal_paint,
                    1,
                    Nn,
                    tangent,
                    color(1),
                    in_metallicRoughnessC,
                    in_anisotropyAmount,
                    1,
                    1.0,
                    in_metallicColorC,
                    color(1));
            }

            if (in_clearCoatReflectance)
            {
                float ior = ior_from_normal_reflectance(
                    in_clearCoatReflectance);
#if 1
                float Kr, Kt;

                fresnel(normalize(I), Nn, 1.0 / ior, Kr, Kt);
                Kt = 1.0 - Kr;

                closure color clearcoat = as_glossy(
                    "beckmann",
                    Nn,
                    in_clearCoatRoughness,
                    ior);

                metal_paint = Kt * metal_paint + clearcoat;
#else
                metal_paint = as_alsurface_layer(
                    metal_paint,
                    0,
                    Nn,
                    vector(0),
                    color(1),
                    in_clearCoatRoughness,
                    0.0,
                    0,
                    ior,
                    color(1),
                    color(1));
#endif
            }

            out_outColor = metal_paint;
        }
        else if (in_paintMode == 3)
        {
            // Two tone base

            float view_ratio = max(0.0, dot(-normalize(I), Nn));

            view_ratio = smoothstep(
                0.5 - in_dualColorTransition * 0.5,
                0.5 + in_dualColorTransition * 0.5,
                view_ratio);
            
            color two_tone_mix = mix(
                in_dualColorA,
                in_dualColorB,
                view_ratio);

            closure color two_tone_base = two_tone_mix * diffuse(Nn);

            if (in_dualColorReflectivity)
            {
                float ior = ior_from_normal_reflectance(
                    in_dualColorReflectivity);

                out_outColor = as_alsurface_layer(
                    two_tone_base,
                    1,
                    Nn,
                    tangent,
                    two_tone_mix,
                    in_paintRoughness,
                    in_anisotropyAmount,
                    0,
                    ior,
                    color(1),
                    color(1));
            }
            else
            {
                out_outColor = two_tone_base;
            }

            if (in_clearCoatReflectance)
            {
                float ior = ior_from_normal_reflectance(
                    in_clearCoatReflectance);
#if 1
                float Kr, Kt;

                fresnel(normalize(I), Nn, 1.0 / ior, Kr, Kt);
                Kt = 1.0 - Kr;

                closure color clearcoat = as_glossy(
                    "beckmann",
                    Nn,
                    in_clearCoatRoughness,
                    ior);

                out_outColor = Kt * out_outColor + clearcoat;
#else
                out_outColor = as_alsurface_layer(
                    out_outColor,
                    0,
                    Nn,
                    vector(0),
                    color(1),
                    in_clearCoatRoughness,
                    0.0,
                    0,
                    ior,
                    color(1),
                    color(1));
#endif
            }
        }
        else if (in_paintMode == 4)
        {
            // Iridescent / Pearlescent
        }
        else
        {
            ; // Others|TODO
        }
        
        closure color matte_term;

        if (in_matteOpacityMode == 0)
        {
            matte_term = 0;
        }
        else if (in_matteOpacityMode == 1)
        {
            matte_term = holdout();
        }
        else
        {
            matte_term = in_matteOpacity * holdout();
        }

        out_outMatteOpacity = matte_term;

        out_outColor += matte_term;
    }
}

